---
import { SectionGridContainer, Avatar } from '@components'
import BaseLayout from '@layouts/BaseLayout.astro'
import { getEntry, getCollection } from 'astro:content'
import type { CollectionEntry } from 'astro:content'

interface Props {
  post: CollectionEntry<'blog'>
}

export async function getStaticPaths() {
  const content = await getCollection('blog')

  const result = content.map((post) => {
    return {
      params: {
        slug: post.slug,
      },
      props: {
        post,
      },
    }
  })

  return result
}

const { post } = Astro.props
let authors: CollectionEntry<'authors'>[] = []

for (const author of post.data.authors) {
  const authorObj = await getEntry(author.collection, author.id)
  if (authorObj) {
    authors.push(authorObj)
  }
}
const formattedDate = new Date(post.data.date).toLocaleDateString('de-DE', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
})

const { Content } = await post.render()
const { title, subtitle, image, teaser } = post.data
---

<BaseLayout metaTitle={title} metaSubtitle={'bitbetter blog'} metaImage={post.data.image.url}>
  <SectionGridContainer className='bg-bb-grey-200' innerClassName='py-12 lg:py-24 px-5 lg:px-0'>
    <div class='lg:col-start-2 col-span-12 flex flex-col gap-4'>
      <h4 class='uppercase text-black/60'>{subtitle}</h4>
      <h1 class='font-grotesk text-7xl font-medium'>{title}</h1>
    </div>
  </SectionGridContainer>
  <SectionGridContainer className='bg-bb-grey-200' innerClassName=''>
    <div class='lg:col-start-2 lg:col-span-6 order-2 lg:order-1'>
      <img
        src={image.url}
        alt={image.alt}
        class='w-full h-auto aspect-video object-cover lg:-mb-20'
      />
    </div>
    <div class='lg:col-start-9 lg:col-span-4 px-5 lg:px-0 order-1 lg:order-2'>
      <p class='text-lg py-4 leading-[1.4em] text-black/75'>
        {teaser}
      </p>
      {
        Boolean(post?.data?.date) && (
          <p class='text-lg pt-4 italic pb-12'>Ver√∂ffentlicht am {formattedDate}</p>
        )
      }
      {
        Boolean(authors.length) && (
          <p class='text-lg font-medium pb-16'>
            Von
            <Avatar
              jpgSrc={authors[0]?.data.image.default}
              webpSrc={authors[0]?.data.image.webp}
              alt={authors[0]?.data.image.alt}
              small
            />{' '}
            {authors[0].data.firstName + ' ' + authors[0].data.lastName}
            {authors.length > 1 && (
              <>
                {' '}
                &
                <Avatar
                  jpgSrc={authors[1]?.data.image.default}
                  webpSrc={authors[1]?.data.image.webp}
                  alt={authors[1]?.data.image.alt}
                  small
                />{' '}
                {authors[1].data.firstName + ' ' + authors[1].data.lastName}
              </>
            )}
          </p>
        )
      }
    </div>
  </SectionGridContainer>
  <SectionGridContainer innerClassName='pt-8 lg:pt-24 pb-28 px-5 lg:px-0'>
    <article
      class='col-start-2 col-span-6 prose prose-lg prose-p:leading-[1.4em] prose-headings:font-grotesk prose-blockquote:border-l-0 prose-blockquote:font-grotesk prose-blockquote:pl-0 prose-bb-grey prose-li:my-0 max-w-none'
    >
      <Content />
    </article>
  </SectionGridContainer>
</BaseLayout>
